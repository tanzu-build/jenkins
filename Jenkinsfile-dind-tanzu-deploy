pipeline {
  agent {
    kubernetes { // This entire `kubernetes` section should be removed if Jenkins is running on VMs
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: jnlp
            image: jenkins/inbound-agent:latest-jdk17
            args: ["-noCertificateCheck"]
            imagePullPolicy: IfNotPresent # Always
          - name: docker
            image: <YOUR-REGISTRY>/docker:dind-tanzu-build
            imagePullPolicy: IfNotPresent # Always
            securityContext:
              privileged: true
            env:
            - name: DOCKER_TLS_CERTDIR
              value: ""
            volumeMounts:
            - name: docker-graph-storage
              mountPath: /var/lib/docker
          volumes:
          - name: docker-graph-storage
            persistentVolumeClaim:
              claimName: docker-claim
        '''
    }
  }
  parameters {
    string(name: 'GITREPO', defaultValue: 'https://github.com/tanzu-build/tanzu-build-samples.git') // Git repo to build
    string(name: 'BRANCH', defaultValue: '*/main') // Branch of the Git repo to build
    string(name: 'GIT_CREDENTIALS_ID', defaultValue: 'mgb-git-tanzu-build') // Credentials for the Git repo to build
    string(name: 'REGISTRY_NAME' , defaultValue: 'registry-name') // Docker Registry for containers artifacts
    string(name: 'REGISTRY_CREDENTIALS_ID', defaultValue: 'mgbdocker') // Docker Registry Creds for containers artifacts
    string(name: 'TANZU_API_TOKEN' , defaultValue: 'Tanzu_Platform_for_K8s_SaaS_-_Internal_1_APItoken') // TPk8s API Token
    string(name: 'PROJECT' , defaultValue: 'ne-growth')  // TPk8s project
    string(name: 'SPACE' , defaultValue: 'gabry')     // TPk8s Space    
    string(name: 'BUILD_PLAN_SOURCE' , defaultValue: 'custom-build-plan')  // TPk8s plan
  }
  triggers {
    GenericTrigger(
      genericVariables: [
        [key: 'GITREPO', value: '$.repository.git_http_url'],
        [key: 'BRANCH', value: '$.ref']
      ],
      causeString: 'Triggered on $GITREPO',
      token: 'gitlab-basic', // Optional security token
      printContributedVariables: true,
      printPostContent: true,
      regexpFilterText: '',
      regexpFilterExpression: ''
    )
  }
  stages {
    stage('Cloning Git Application Repo') {
      steps {
        container('docker') {
          script {
            def prefix = ""
            def git_creds=GIT_CREDENTIALS_ID
            if (env.GITREPO.startsWith('https://gitlab')) { // Webhook from GITLAB
              env.BRANCH = branch.replaceAll('refs/heads/', '') // GitLab sends branch as refs/heads/branch
              prefix = env.GITREPO.split('/').last().replace('.git', '') + ":"
              git_creds=GIT_CREDENTIALS_ID.replace('git-', "gitlab-")
            }
            
            withCredentials([string(credentialsId: git_creds, variable: 'GIT_TOKEN')]) {
              def gitRepoUrl = params.GITREPO.replace('https://', "https://${prefix}${GIT_TOKEN}@")
              checkout([
                  $class: 'GitSCM',
                  branches: [[name: params.BRANCH]],
                  userRemoteConfigs: [[url: gitRepoUrl, credentialsId: git_creds]]
              ])
            }
          }
        }
      }
    }
    stage('Login to Docker Registry') {
      steps {
        container('docker') {
          withCredentials([usernamePassword(credentialsId: REGISTRY_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                sh('docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD')
          }
        }
      }
    }
    stage('Configure Build Environment') {
      steps {
        container('docker') {
          script {
            withCredentials([string(credentialsId: REGISTRY_NAME, variable: 'REG_NAME')]) {
              sh("tanzu build config --build-plan-source-type=ucp --containerapp-registry ${REG_NAME}/{name} --build-plan-source ${params.BUILD_PLAN_SOURCE}")
            }
            withCredentials([string(credentialsId: TANZU_API_TOKEN, variable: 'TANZU_API_TOKEN_API')]) {
              sh('TANZU_API_TOKEN=$TANZU_API_TOKEN_API tanzu login')
            }
            sh("tanzu project use ${params.PROJECT}")
            sh("tanzu space use ${params.SPACE}")          
          }
        }
      }     
    }
    stage('Build') {
      steps {
        container('docker') {
          // Build with the cli
          sh("tanzu deploy -y")
        }
      }
    }
  }
}
